{"version":3,"sources":["index.js","App.js","serviceWorker.js","blog.js","posts/post1/test.jsx","../src sync /^/.//.*$","Test.txt","posts/post1/test.md"],"names":["ReactDOM","render","StrictMode","document","getElementById","serviceWorker","NoMatch","useLocation","pathname","Main","postOrder","map","post","posts","postPath","title","key","to","About","props","Post","postName","match","params","jsxFilePath","Loaded","require","replace","default","console","log","App","bg","variant","expand","Brand","Toggle","aria-controls","Collapse","id","className","exact","path","component","isLocalhost","Boolean","window","location","hostname","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","message","fs","util","yaml","converter","tables","readDir","promisify","readdir","listDir","dirPath","a","x","join","readFile","writeFile","stat","getNthIndexOf","str","pattern","n","l","length","i","asyncForEach","array","func","Promise","all","getPostData","resolve","mdFilePath","filter","endsWith","Error","ret","basename","relative","__dirname","mdFileName","parse","name","fileText","parsed","split","header","safeLoad","date","Date","isNaN","birthtime","generateJsx","Object","keys","src","markdown","substring","html","makeHtml","jsx","getMetadata","pathes","statSync","isDirectory","errors","categories","postData","category","push","postCount","sort","b","meta","JSON","stringify","main","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","module","exports"],"mappings":"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","file":"static/js/main.fddfefeb.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// Import stylesheets\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Import metatdata\nimport { posts, postOrder, categories } from './meta.json'\n\n// Import libraries\nimport React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  useLocation\n} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar bg='dark' variant='dark' expand=\"lg\">\n        <Navbar.Brand>This is a blog title!</Navbar.Brand>\n\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Link to=\"/\">Main</Link>\n            <Link to=\"/about\">About</Link>\n          </Nav>\n        </Navbar.Collapse>\n\n      </Navbar>\n      <Switch>\n        <Route exact path=\"/\">\n          <Main></Main>\n        </Route>\n        <Route path=\"/posts/:postName\" component={Post}>\n        </Route>\n        <Route path=\"/about\" component={About}>\n        </Route>\n        <Route component={NoMatch}>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nfunction NoMatch() {\n  return (\n    <div>Path {useLocation().pathname} is unregistered route.</div>\n  )\n}\n\nfunction Main() {\n  return (\n    <div>\n      TEST\n      <ul>\n        <h1>Post List</h1>\n        {postOrder.map(post => {\n          const { postPath, title } = posts[post]\n          return <li key={post}>\n            <Link to={postPath} >{title}</Link>\n          </li>\n        })}\n      </ul>\n      List Fin\n    </div>\n  )\n}\n\nfunction About(props) {\n  return <div>\n    This is my information!\n</div>\n}\n\nfunction Post(props) {\n  const postName = props.match.params.postName\n  const { jsxFilePath } = posts[postName]\n  const Loaded = require('./' + jsxFilePath.replace('.jsx', '')).default\n  console.log(Loaded)\n  return (\n    <div>\n      <div>Selected post = {jsxFilePath}</div>\n      <Loaded></Loaded>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const fs = require('fs')\nconst util = require('util')\nconst path = require('path')\nconst yaml = require('js-yaml');\nconst converter = new (require('showdown')).Converter({\n    tables: true\n})\n\n// Promisified functions\nconst readDir = util.promisify(fs.readdir)\nconst listDir = async dirPath => (await readDir(dirPath)).map(x => path.join(dirPath, x))\nconst readFile = util.promisify(fs.readFile)\nconst writeFile = util.promisify(fs.writeFile)\nconst stat = util.promisify(fs.stat)\n\n// Find n-th appearence of pattern in string.\nfunction getNthIndexOf(str, pattern, n) {\n    var l = str.length,\n        i = -1;\n    while (n-- && i++ < l) {\n        i = str.indexOf(pattern, i);\n        if (i < 0) break;\n    }\n    return i;\n}\n\nasync function asyncForEach(array, func) {\n    return Promise.all(array.map(func))\n}\n\n// Get post data from post path\nasync function getPostData(postPath) {\n    // Convert postPath to full path\n    postPath = path.resolve(postPath);\n\n    // Get markdown file name\n    const mdFilePath = (await listDir(postPath)).filter(x => x.endsWith('.md'))[0]\n    if (!mdFilePath) throw new Error('There are no content file')\n\n    // Create data\n    var ret = {\n        postName: path.basename(postPath),\n        postPath: path.relative(__dirname, postPath),\n        mdFileName: path.basename(mdFilePath),\n        mdFilePath: path.relative(__dirname, mdFilePath),\n        jsxFilePath: path.relative(__dirname, path.join(postPath, path.parse(mdFilePath).name + '.jsx'))\n    }\n\n    // Parse YMAL formatter and get title and tags.\n    const fileText = await readFile(mdFilePath, 'utf-8')\n    const parsed = fileText.split('---')\n    if (parsed.length < 2) throw new Error('No YAML formatter exists in ' + mdFilePath + '.')\n    const header = yaml.safeLoad(parsed[1])\n    if (!header['title']) throw new Error('YAML formatter does not contain \\'title\\' attribute. YAML header : ', header)\n    ret['title'] = header['title']\n    ret['category'] = header['category']\n\n    // Get Date\n    const date = new Date(header['date'])\n    if (isNaN(date)) {\n        ret['date'] = (await stat(mdFilePath)).birthtime\n    } else {\n        ret['date'] = date\n    }\n    return ret;\n}\n\nasync function generateJsx(posts) {\n    return asyncForEach(Object.keys(posts), async function (post) {\n        const { mdFilePath, jsxFilePath, postPath } = posts[post]\n        const src = await readFile(path.join(__dirname, mdFilePath), 'utf-8')\n        const markdown = src.substring(3 + getNthIndexOf(src, '---', 2))\n        const html = converter.makeHtml(markdown)\n        const jsx = `\nimport React from 'react'\nexport default function(props) {\n    return (\n        <div className=\"blog-post\">\n        ${html}\n        </div>\n    );\n};`\n        writeFile(path.join(__dirname, jsxFilePath), jsx)\n    })\n}\n\nasync function getMetadata() {\n\n    // Get post directories\n    var pathes = (await listDir('./posts')).filter(x => fs.statSync(x).isDirectory())\n    const errors = []\n    const posts = {}\n    let postOrder = []\n    const categories = {}\n    await asyncForEach(pathes, async function (path) {\n        try {\n            const postData = await getPostData(path)\n            const { postName, category } = postData\n            posts[postName] = postData\n            postOrder.push(postData)\n            if (categories[category]) categories[category].postCount++\n            else categories[category] = { postCount: 1 }\n        } catch (e) {\n            errors.push({ postPath: path, error: e })\n        }\n    })\n\n    // Sort posts by date\n    postOrder = postOrder\n        .sort((a, b) => b.date - a.date)\n        .map(post => post.postName)\n\n    return {\n        posts,\n        errors,\n        categories,\n        postOrder\n    }\n}\n\nasync function main() {\n    const meta = await getMetadata()\n    writeFile(path.join(__dirname, 'meta.json'), JSON.stringify(meta))\n    generateJsx(meta.posts)\n}\n\nmain()\n","\nimport React from 'react'\nexport default function(props) {\n    return (\n        <div className=\"blog-post\">\n        <p>This is test file</p>\n<h1 id=\"andthisisheader\">And this is header.</h1>\n<p>We can use <code>some code</code> like this.</p>\n        </div>\n    );\n};","var map = {\n\t\"./\": 23,\n\t\"./App\": 25,\n\t\"./App.js\": 25,\n\t\"./Test.txt\": 65,\n\t\"./blog\": 41,\n\t\"./blog.js\": 41,\n\t\"./index\": 23,\n\t\"./index.js\": 23,\n\t\"./meta\": 17,\n\t\"./meta.json\": 17,\n\t\"./posts/post1/test\": 45,\n\t\"./posts/post1/test.jsx\": 45,\n\t\"./posts/post1/test.md\": 99,\n\t\"./serviceWorker\": 26,\n\t\"./serviceWorker.js\": 26\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 64;","module.exports = __webpack_public_path__ + \"static/media/Test.caf7df6e.txt\";","module.exports = __webpack_public_path__ + \"static/media/test.2c14067b.md\";"],"sourceRoot":""}