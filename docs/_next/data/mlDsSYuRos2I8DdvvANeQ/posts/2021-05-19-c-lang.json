{"pageProps":{"post":{"title":"C언어 선언과 정의, 매크로에 대한 정리","category":"programming language","date":"2021-05-19T17:11:29.249Z","html":"<p>C언어에 대한 몇 가지 헷갈리는 개념들을 정리해둡니다.</p>\n<h1>선언(Declaration)과 정의(Definition)</h1>\n<p>C언어에서 변수나 함수를 만들 때, 이와 관련된 두 가지 개념이 있습니다. 하나는 <strong>선언</strong>이며, 하나는 <strong>정의</strong>입니다.</p>\n<h2>선언</h2>\n<p>C 언어에서 선언이란</p>\n<ol>\n<li>어떤 이름(identifier)에 해당하는 대상, 즉 변수나 함수가 (어디에 있는지는 모르겠지만) 존재하며</li>\n<li>그 이름을 갖는 대상의 형식이 무엇인지(e.g. <code>int</code>, <code>char*</code>, <code>void function(int)</code>)</li>\n</ol>\n<p>알려주는 것을 의미합니다. 그러므로 함수나 변수가 선언<em>만</em> 되어 있는 경우 실제 그 값이나 함수의 동작 방식은 전혀 알 수 없으며, 컴파일 시에 오류를 발생시킵니다. 예를 들어 아래와 같이 함수를 선언하기만 하고, 정의하지는 않을 수 있습니다.</p>\n<pre><code class=\"language-c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>{\n\t<span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">2</span>;\n\t<span class=\"hljs-type\">int</span> d = <span class=\"hljs-number\">3</span>;\n\t<span class=\"hljs-type\">int</span> e = sum(c,d);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>위 코드에서 1번째 줄과 같이 함수를 정의 없이 선언하는 것을 <code>function prototype</code>이라 합니다. 이 경우 이 코드를 컴파일하면 컴파일 에러가 발생합니다. 왜냐하면 첫 번째 줄에서 저런 형식을 갖는  <code>sum</code>이라는 함수가 어딘가에는 존재한다고 알려주었지만, 실제로는 그런 함수가 존재하지 않기 때문입니다.</p>\n<p>그러므로 함수의 선언은 오직 컴파일 단계에서만 영향을 미치며, 실제로 생성되는 바이너리파일에는 아무 영향을 주지 않습니다. 실제로 C언어에서 아무리 많은 함수를 정의 없이 선언해도 생성되는 바이너리의 용량은 전혀 변하지 않습니다.</p>\n<h2>정의</h2>\n<p>C언어에서 정의란</p>\n<ol>\n<li>어떤 이름에 해당하는 대상, 즉 변수나 함수를 선언함과 동시에</li>\n<li>이에 대한 값까지 부여하는 것</li>\n</ol>\n<p>을 의미합니다.</p>\n<p>그러므로 C언어에서 어떤 대상을 선언 없이 정의하는 것은 불가능합니다. 다만 선언이 되어있지만 선언이 되어있다는 사실 자체를 모를 수는 있습니다. 예를 들어 아래와 같은 경우입니다.</p>\n<pre><code class=\"language-c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">f1</span><span class=\"hljs-params\">()</span>{\n\tf2();\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">f2</span><span class=\"hljs-params\">()</span>{\n\t<span class=\"hljs-comment\">// content of f2</span>\n}\n</code></pre>\n<p>이 경우 <code>f1</code>이 <code>f2</code>보다 먼저 정의돼있기 때문에 컴파일러가 <code>f1</code>을 컴파일하는 시점에는 <code>f2</code>라는 함수가 아직 선언되지 않았고, 따라서 경고를 발생시킵니다. 또는 아래와 같은 경우도 있습니다.</p>\n<pre><code class=\"language-c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>{\n\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello world!&quot;</span>);\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<p>이 경우 <code>#include</code>를 통해 <code>printf</code>함수를 포함하는 헤더 파일을 include하지 않았기 때문에 <code>main</code>함수를 컴파일하는 시점에는 <code>printf</code>함수가 선언되지 않았고, 따라서 컴파일러는 경고를 발생시킵니다.</p>\n<p>그러나 위 두 케이스 모두에서 선언은 되어 있지 않지만, 어쨌든 그러한 함수가 존재하기는 하므로 컴파일러는 링킹 단계에서 정상적으로 함수를 찾아 넣을 수 있습니다. 따라서 컴파일 오류는 발생하지 않고, 정상적으로 바이너리가 생성됩니다.</p>\n<h2>extern</h2>\n<p>C언어에서 함수를 정의 없이 선언할 때에는 단순히 함수의 바디를 작성하지 않고 세미콜론으로 끝내버리면 됐었습니다. 그러나 C언어에서 변수를 정의 없이 선언하는 것은 단순히 값을 할당하지 않는 것으로는 이뤄지지 않습니다.</p>\n<pre><code class=\"language-c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> a;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>{\n\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, a);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>예를 들어 위와 같이 하면, 언듯 보기에는 <code>a</code>에 어떠한 값도 할당하지 않았으므로 이는 선언만 한 것이고, 따라서 컴파일 에러가 발생할 것 같습니다. 그러나 이는 사실은 아래와 동일한 구문입니다.</p>\n<pre><code class=\"language-c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>{\n\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, a);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>C언어 컴파일러는 자동으로 모든 전역 변수를 0으로 초기화하므로, 단순히 값을 명시적으로 할당하지 않음으로써 정의 없는 선언을 할 수는 없습니다. C언어에서 정의 없이 선언하려면 아래와 같이 extern 키워드를 사용해야 합니다.</p>\n<pre><code class=\"language-c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-type\">int</span> a;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>{\n\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, a);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>그런데 이 경우에는 함수와 마찬가지로 에러가 발생해야 할 것만 같은데, 실제로는 에러가 발생하지 않습니다. 실제로 위 코드를 컴파일할 경우 컴파일이 잘 되는데, 이는 컴파일러가 정의 없이 선언된 변수를 발견할 경우 자동으로 정의를 추가해버리기 때문으로 생각됩니다. 함수는 그 내용을 명시적으로 정의하지 않으면 컴파일러가 이를 자동으로 처리할 방법이 없습니다. 그러나 변수의 경우 전역 변수에서 값을 할당하지 않은 경우와 마찬가지로 0으로 그 값을 초기화하는 것이 가능합니다. 그래서 이렇게 동작하는 것이라고 추측합니다. (이는 추측이며 실제로 그런 이유에서인지는 잘 모르겠습니다.)</p>\n<h1>#include</h1>\n<p>그리고 하나 더 정리해두고 싶은 것은 <code>#include</code> 전처리 구문이 하는 역할입니다. <code>java</code>나 <code>python</code> 등 매우 추상화가 많이 이루어진 언어의 경우 <code>import</code> 구문이 여러가지 복잡한 역할을 수행합니다. 그러나 C언어에서 <code>#include</code> 구문은 단순히 다른 파일의 내용을 통째로 가져오는 것에 불과합니다. 예를 들어 아래와 같이 <code>#include</code> 구문을 사용할 수도 있습니다.</p>\n<pre><code>// test.txt\n&quot;This is some string!&quot;\n</code></pre>\n<pre><code class=\"language-c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-type\">char</span>* <span class=\"hljs-built_in\">string</span> =\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;test.txt&quot;</span></span>\n;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>{\n    pritnf(<span class=\"hljs-string\">&quot;test.txt = %s\\n&quot;</span>,<span class=\"hljs-built_in\">string</span>);\n    <span class=\"hljs-keyword\">return</span>\n}\n</code></pre>\n<p>이는 실제로 정상적으로 잘 동작하는 구문입니다. 이 사실을 통해 왜 전역 변수나 함수를 정의할 때 header파일에 선언해두면 되는지 알 수 있습니다. 그렇게 할 경우 선언한 내용들이 헤더 파일을 include하는 모든 소스파일에 그대로 옮겨지므로 컴파일 시점에 컴파일러가 선언이 존재함을 알 수 있고, 실제로 소스파일이 존재하므로 링킹 역시 잘 이뤄지기 때문입니다.</p>\n","name":"2021-05-19-c-lang"},"postsInSameCategory":[{"title":"C언어 선언과 정의, 매크로에 대한 정리","category":"programming language","date":"2021-05-19T17:11:29.249Z","name":"2021-05-19-c-lang"}]},"__N_SSG":true}