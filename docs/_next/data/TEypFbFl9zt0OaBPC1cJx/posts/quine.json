{"pageProps":{"post":{"title":"콰인(Quine)","category":"algorithm","date":"2021-04-05T21:27:20.117Z","html":"<h1>소개</h1>\n<p>인터넷을 돌아다니다가 뜬금없이 Quine이라는 것을 발견했습니다. 콰인이란 어떤 프로그램 소스 코드로, 실행시켰을 때 그 자신을 출력하는 것을 말합니다. 가장 자명한 콰인은 아무것도 없는 소스코드입니다. 아무것도 없는 소스코드는 아무것도 출력하지 않으므로, 자기 자신을 출력한다고 볼 수 있습니다. 당연하지만, <code>eval</code>, <code>exec</code>류의 <code>string</code> 실행 함수, <code>reflection</code>, 그냥 파일 읽기, 외부 라이브러리 등을 사용하면 안 됩니다.</p>\n<h1>소스코드</h1>\n<p>저는 아래와 같은 python 코드로 콰인을 작성했습니다.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-params\">s</span>):\n    s = s.replace(<span class=\"hljs-string\">&quot;\\\\&quot;</span>, <span class=\"hljs-string\">&quot;\\\\\\\\&quot;</span>)\n    s = s.replace(<span class=\"hljs-string\">&#x27;&quot;&#x27;</span>, <span class=\"hljs-string\">&#x27;\\\\&quot;&#x27;</span>)\n    s = s.replace(<span class=\"hljs-string\">&quot;&#x27;&quot;</span>, <span class=\"hljs-string\">&quot;\\\\&#x27;&quot;</span>)\n    s = s.replace(<span class=\"hljs-string\">&#x27;&#x27;&#x27;\n&#x27;&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;\\\\n&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> s\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">self_print</span>(<span class=\"hljs-params\">x</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&#x27;&#x27;&#x27;<span class=\"hljs-subst\">{x}</span>\n\nself_print(\n    &quot;<span class=\"hljs-subst\">{decode(x)}</span>&quot;)&#x27;&#x27;&#x27;</span>)\n\n\nself_print(\n    <span class=\"hljs-string\">&quot;def decode(s):\\n    s = s.replace(\\&quot;\\\\\\\\\\&quot;, \\&quot;\\\\\\\\\\\\\\\\\\&quot;)\\n    s = s.replace(\\&#x27;\\&quot;\\&#x27;, \\&#x27;\\\\\\\\\\&quot;\\&#x27;)\\n    s = s.replace(\\&quot;\\&#x27;\\&quot;, \\&quot;\\\\\\\\\\&#x27;\\&quot;)\\n    s = s.replace(\\&#x27;\\&#x27;\\&#x27;\\n\\&#x27;\\&#x27;\\&#x27;, \\&#x27;\\\\\\\\n\\&#x27;)\\n    return s\\n\\n\\ndef self_print(x):\\n    print(f\\&#x27;\\&#x27;\\&#x27;{x}\\n\\nself_print(\\n    \\&quot;{decode(x)}\\&quot;)\\&#x27;\\&#x27;\\&#x27;)&quot;</span>)\n\n</code></pre>\n<p>위 코드를 실행하면 자기 자신과 완벽히 똑같은 출력을 내보냅니다.</p>\n<h2>논리적 도출</h2>\n<p>저는 콰인을 구현하는 방법에 대해 한 번도 들어본 적이 없기 때문에 순수하게 바닥에서부터 출발했고, 따라서 다른 코드들과 방향성이 좀 다를 수 있습니다.</p>\n<p>먼저 위 함수는 다음과 같은 아이디어에서 출발했습니다.</p>\n<blockquote>\n<p>만약 언어 자체에 self_print(x) 라는 함수가 있어서, 이 함수의 출력이</p>\n<p>self_print(&quot;x&quot;)</p>\n<p>라면 어떨까?</p>\n</blockquote>\n<p>만약 그렇다면 다음과 같은 코드는 콰인이 됩니다.</p>\n<pre><code class=\"language-python\">self_print(<span class=\"hljs-string\">&quot;아무 문자열&quot;</span>)\n</code></pre>\n<p>그러나 당연하게도 파이썬에는 저런 함수가 없습니다. 그러므로 <code>self_print</code>함수를 직접 정의할 필요가 있습니다.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">self_print</span>(<span class=\"hljs-params\">x</span>):\n\t<span class=\"hljs-comment\"># ~~~</span>\n\nsef_print(<span class=\"hljs-string\">&quot;아무 문자열&quot;</span>)\n</code></pre>\n<p>그런데 여기서 문제가 발생합니다. <code>self_print</code>함수의 정의 자체는 출력하지 않기 때문에, 이렇게 되면 콰인이 아니게 됩니다. 이것을 콰인으로 만드려면 출력에 <code>self_print</code>함수에 대한 정의 자체가 출력에 포함되어야 합니다. 그러기 위해서 두 가지 방법이 있습니다.</p>\n<ol>\n<li><code>self_print</code>함수 내부에 <code>self_print</code>함수를 정의하는 문자열을 넣는다.</li>\n<li><code>self_print</code>함수 외부에 <code>self_print</code>함수를 정의하는 문자열을 넣는다.</li>\n</ol>\n<p>이중 1번은 생각해보면 불가능함을 알 수 있습니다. 왜냐하면 <code>self_print</code>함수를 정의하는 데 <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\" style=\"stroke-width: 3;\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></mjx-assistive-mml></mjx-container>개의 문자가 필요하다고 하면, 이것을 따옴표로 감싸기만 해도 <code>n+2</code>개의 문자가 필요합니다. 그런데 이것이 다시 <code>self_print </code>함수의 정의에 포함되어야 하므로 <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.629ex\" height=\"1.692ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 4256 748\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(822.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1822.4,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2600.2,0)\"><path data-c=\"3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3656,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\" style=\"stroke-width: 3;\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi><mo>+</mo><mn>2</mn><mo>&lt;</mo><mi>n</mi></math></mjx-assistive-mml></mjx-container> 이 되어 모순이 발생하기 때문입니다.</p>\n<p>따라서 <code>self_print</code> 함수 외부에 그런 문자열이 있어야 하며, 그것을 <code>self_print </code>내부로 전달해야 합니다. 그러기 위해서 자명히 <code>self_print</code>함수의 파라매터를 사용할 수 있습니다.</p>\n<p>그러면 이제 이 함수에 대한 정의를 함수 안에서 알 수 있게 됩니다. 이것을 출력에 포함시키기만 하면 완성입니다. 즉, 다음과 같이 하면 됩니다.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">self_print</span>(<span class=\"hljs-params\">x</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&#x27;&#x27;&#x27;<span class=\"hljs-subst\">{x}</span>\n\nself_print(\n    &quot;<span class=\"hljs-subst\">{x}</span>&quot;)&#x27;&#x27;&#x27;</span>)\n</code></pre>\n<p>이렇게 하면 <code>self_print</code>의 인자로 <code>self_print</code>의 정의를 나타내는 문자열을 받았을 경우 콰인이 됩니다.</p>\n<p>다만 이렇게 할 때 사소한 문제는 문자열 escape입니다. 큰따옴표로 선언된 문자열 리터럴 내부에 큰따옴표를 집어넣거나, 줄바꿈을 표현하려면 escape를 해야 합니다. 그런데 <code>print</code>를 사용하여 출력할 때에는 <code>escape</code> 문자가 전부 처리된 후 출력되기 때문에,  escape한 문자열을 다시 역-escape해주는 부분을 추가해야 합니다. 그 부분(위의 소스코드에서는 <code>decode</code>함수)위의 소스코드와 같은 결과를 얻게 됩니다.</p>\n","name":"quine"},"postsInSameCategory":[{"title":"콰인(Quine)","category":"algorithm","date":"2021-04-05T21:27:20.117Z","name":"quine"},{"title":"알고리즘:부분문자열","category":"algorithm","date":"2021-01-19T14:25:47.455Z","name":"algorithm-2"},{"title":"알고리즘:N-queens problem","category":"algorithm","date":"2021-01-17T17:26:17.050Z","name":"algorithm-1"}]},"__N_SSG":true}