{"pageProps":{"post":{"title":"알고리즘:부분문자열","category":"algorithm","date":"2021-01-19T14:25:47.455Z","postStr":"---\ntitle: 알고리즘:부분문자열\ncategory: algorithm\ndate: 2021-01-19T14:25:47.455Z\n\n---\n\n다음 문제로 뭘 풀까 하다가 양심없게도 알고리즘 소모임에서 이번에 진행하는 `LeetCode` 문제를 보고 풀어보기로 했습니다. 오늘 풀어 본 문제는 `반복되는 문자가 없는 가장 긴 부분문자열`이라는 문제인데요. 말 그대로\n\n1. 주어진 문자열의 연속되는 부분 문자열 중\n2. 반복되는 문자가 하나도 없는 것들 중\n3. 가장 긴 것의 길이는?\n\n이라는 문제였습니다.\n\n# $O(n^2)$ 접근\n\n저는 처음에 이것이 $O(n^2)$ 시간/공간복잡도를 필요로 하는 dynamic programming 문제인줄로만 생각했습니다. 그래서 `dp`라는 이름의 2차원 배열을 만들고, `dp[s][e]`를 채웠습니다. `dp[s][e]`는\n\n- 만약 주어진 문자열에서 `s` 번째에서 시작해서 `e`번째에서 끝나는 부분 문자열이 반복되는 문자가 없을 경우\n  - 그 부분 문자열을 값을 가지고\n- 반복되는 문자가 있을 경우\n  - False를 값으로 가집니다.\n\n이렇게 구성할 경우, `dp[s][e]`의 값을 알아내려면 `dp[s+1][e]`와 `dp[s][e-1]`의 값만 알면 됩니다. 그러므로 `dp[x][x]=str[x]`로 초기화하고 점차 이 배열을 채워나가면서 `문자열 길이 = e-s+1`의 최댓값을 구하면 됩니다.\n\n(실제로는 `dp[s][e]`에는 문자열 전체가 아니라 시작 문자와 끝 문자만 저장되면 됩니다. 그러나 이 알고리즘은 실패한 알고리즘이므로 아이디어만 설명하고 넘어갑니다.)\n\n이 알고리즘은 `dp`배열을 구상하고 채우는 것이 약간 복잡할 뿐, 아이디어만 떠올리면 별로 어렵지 않습니다. 그래서 금방 python으로 코딩한 후, 제출해봤습니다. 아래는 소스코드입니다.\n\n```python\nclass Solution(object):\n    def lengthOfLongestSubstring(self, st):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        l = len(st)\n        if l==0:\n            return 0\n        dp = [[False]*l for _ in range(l)]\n        '''\n        dp[s][e] = substr[s][e] including s,e\n        '''\n        for i in range(l):\n            dp[i][i] = st[i]\n        ml = 1\n        for i in range(1,l):\n#           i = string length - 1\n            trueFlag = False\n            for j in range(l-i):\n                s = j\n                e = s+i\n                a = dp[s+1][e]\n                b = dp[s][e-1]\n                if (a is not False) and (b is not False) and (b[0] is not a[-1]):\n                    ml = i+1\n                    dp[s][e] = st[s]+st[e]\n                    trueFlag = True\n                else:\n                    dp[s][e] = False\n            if not trueFlag:\n                return ml\n        return ml\n```\n\n\n\n결과는...\n\n![image-20210119224241196](imgs/image-20210119224241196.png)\n\n하나가 시간이 부족해서 안 되네요. 맞왜틀을 몇 번 시전하고 난 후, 입력을 자세히 살펴보니 아래와 같은 문자열이 계속 반복되고 있었습니다. (`LeetCode`에서는 친절하게도 실패한 입력이 무엇인지를 알려줬습니다.)\n\n```\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\n```\n\n그러므로 전체 문자열 길이가 $m$이라 하고, 이 문자열의 길이가 $k$라 하면 길이 $k$미만의 부분 문자열에서는 반복이 절대 나타나지 않습니다. 이 경우, 제 알고리즘에서는 시간복잡도가 $O(2mk-k^2)$이 됩니다. 이는 $m$과 $k$에 대해 단조증가입니다. 그런데 대충 보니 $m$은 문제에서 제시한 최댓값정도인 듯하고, $k$는 가능한 모든 문자를 사용했으므로 또한 최댓값이 됩니다. 그래서 이것이 가능한 입력 중 최악의 입력케이스였습니다.\n\n# $O(n)$ 접근\n\n 근데 한참 고민하다 보니까, 그냥 해결책이 떠올랐습니다. `dp`배열을 저렇게 구상할 게 아니라, 이렇게 하면 어떨까?\n\n```\ndp[i]=i번째 문자열을 끝으로 하는 반복되는 문자가 없는 가장 긴 부분문자열의 시작 위치\n```\n\n그리고 딕셔너리 `la`를 만들어서, 다음과 같이 정의합니다.\n\n```\nla[x]=현재 위치 이전에 문자 x가 나타난 마지막 위치. x가 한 번도 만약 나타나지 않았으면 0.\n```\n\n이렇게 하면 다음과 같은 알고리즘을 사용할 수 있습니다.\n\n- 부분문자열의 최대 길이를 `maxLength=0`이라 두자.\n- 위치 `i`에서 문자가 `x`라 하자.\n- 만약 마지막으로 `x`가 나타난 위치가 `dp[i-1]`보다 작다면, 이는 `dp[i-1]`에서 `i`사이에는 중복된 문자가 하나도 없다는 뜻이다.\n  - 그러므로 `dp[i]=dp[i-1]`\n- 만약 마지막으로 `x`가 나타난 위치(`la[x]`)가 `dp[i-1]`보다 크다면, 이는 `la[x]+1`과 `i`사이에는 중복된 문자가 하나도 없다는 뜻이다.\n  - 그러므로 `dp[i]=la[x]+1`\n- `i-dp[i]+1`이 `maxLength`보다 크다면 `maxLength=i-dp[i]+1`.\n\n사실 이 알고리즘을 다시 한 번 살펴보면 `dp`배열에서 오직 `i-1`번째 인덱스에만 접근한다는 것을 알 수 있습니다. 그러므로 `dp`는 굳이 배열로 구성할 필요 없이 그냥 변수 하나로 둬도 무방합니다.\n\n따라서 다음과 같이 코드를 작성해봤습니다. 아래 코드에서 `av`가 `dp`와 같은 의미입니다.\n\n```python\nclass Solution(object):\n    def lengthOfLongestSubstring(self, st):\n        l = len(st)\n        if l<2:\n            return l\n        la = {st[0]:0}\n        av = 0\n        ml = 0\n        for i in range(1,l):\n            if st[i] in la:\n                av = max(av,la[st[i]]+1)\n            la[st[i]]=i\n            if (i-av)>ml:\n                ml = i-av\n        return ml+1\n```\n\n코드가 훨씬 짧고 간결해졌습니다.\n\n![image-20210119230859665](imgs/image-20210119230859665.png)\n\n제출 결과, 모든 케이스를 통과했고 상위 10%정도 실행 속도라고 하네요. ㅎㅎ\n\n아래쪽에는 사용한 메모리에서 어느 정도 위치에 있는지를 보여주는데요.\n\n![image-20210119231015410](imgs/image-20210119231015410.png)\n\n흠... 뭔가 제가 모르는, 메모리를 더 적게 사용하는 방법이 있나 봅니다. 어쨌든 통과했고... 빠르면 된 거 아니겠습니까.ㅎ\n\n메모리도 그래프가 저렇게 생겨서 그렇지, 5%정도밖에 차이가 나지 않습니다. 그런 걸 보니 뭔가 변수 하나 더 쓰고 말고 정도의 차이인가 봅니다.","html":"<p>다음 문제로 뭘 풀까 하다가 양심없게도 알고리즘 소모임에서 이번에 진행하는 <code>LeetCode</code> 문제를 보고 풀어보기로 했습니다. 오늘 풀어 본 문제는 <code>반복되는 문자가 없는 가장 긴 부분문자열</code>이라는 문제인데요. 말 그대로</p>\n<ol>\n<li>주어진 문자열의 연속되는 부분 문자열 중</li>\n<li>반복되는 문자가 하나도 없는 것들 중</li>\n<li>가장 긴 것의 길이는?</li>\n</ol>\n<p>이라는 문제였습니다.</p>\n<h1><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 접근</h1>\n<p>저는 처음에 이것이 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 시간/공간복잡도를 필요로 하는 dynamic programming 문제인줄로만 생각했습니다. 그래서 <code>dp</code>라는 이름의 2차원 배열을 만들고, <code>dp[s][e]</code>를 채웠습니다. <code>dp[s][e]</code>는</p>\n<ul>\n<li>만약 주어진 문자열에서 <code>s</code> 번째에서 시작해서 <code>e</code>번째에서 끝나는 부분 문자열이 반복되는 문자가 없을 경우\n<ul>\n<li>그 부분 문자열을 값을 가지고</li>\n</ul>\n</li>\n<li>반복되는 문자가 있을 경우\n<ul>\n<li>False를 값으로 가집니다.</li>\n</ul>\n</li>\n</ul>\n<p>이렇게 구성할 경우, <code>dp[s][e]</code>의 값을 알아내려면 <code>dp[s+1][e]</code>와 <code>dp[s][e-1]</code>의 값만 알면 됩니다. 그러므로 <code>dp[x][x]=str[x]</code>로 초기화하고 점차 이 배열을 채워나가면서 <code>문자열 길이 = e-s+1</code>의 최댓값을 구하면 됩니다.</p>\n<p>(실제로는 <code>dp[s][e]</code>에는 문자열 전체가 아니라 시작 문자와 끝 문자만 저장되면 됩니다. 그러나 이 알고리즘은 실패한 알고리즘이므로 아이디어만 설명하고 넘어갑니다.)</p>\n<p>이 알고리즘은 <code>dp</code>배열을 구상하고 채우는 것이 약간 복잡할 뿐, 아이디어만 떠올리면 별로 어렵지 않습니다. 그래서 금방 python으로 코딩한 후, 제출해봤습니다. 아래는 소스코드입니다.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>(<span class=\"hljs-title class_ inherited__\">object</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lengthOfLongestSubstring</span>(<span class=\"hljs-params\">self, st</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        :type s: str\n        :rtype: int\n        &quot;&quot;&quot;</span>\n        l = <span class=\"hljs-built_in\">len</span>(st)\n        <span class=\"hljs-keyword\">if</span> l==<span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n        dp = [[<span class=\"hljs-literal\">False</span>]*l <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(l)]\n        <span class=\"hljs-string\">&#x27;&#x27;&#x27;\n        dp[s][e] = substr[s][e] including s,e\n        &#x27;&#x27;&#x27;</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(l):\n            dp[i][i] = st[i]\n        ml = <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,l):\n<span class=\"hljs-comment\">#           i = string length - 1</span>\n            trueFlag = <span class=\"hljs-literal\">False</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(l-i):\n                s = j\n                e = s+i\n                a = dp[s+<span class=\"hljs-number\">1</span>][e]\n                b = dp[s][e-<span class=\"hljs-number\">1</span>]\n                <span class=\"hljs-keyword\">if</span> (a <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">False</span>) <span class=\"hljs-keyword\">and</span> (b <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">False</span>) <span class=\"hljs-keyword\">and</span> (b[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> a[-<span class=\"hljs-number\">1</span>]):\n                    ml = i+<span class=\"hljs-number\">1</span>\n                    dp[s][e] = st[s]+st[e]\n                    trueFlag = <span class=\"hljs-literal\">True</span>\n                <span class=\"hljs-keyword\">else</span>:\n                    dp[s][e] = <span class=\"hljs-literal\">False</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> trueFlag:\n                <span class=\"hljs-keyword\">return</span> ml\n        <span class=\"hljs-keyword\">return</span> ml\n</code></pre>\n<p>결과는...</p>\n<p><img src=\"/imgs/77da0f02c47ba1382dedb283eb859307.png\" alt=\"image-20210119224241196\"></p>\n<p>하나가 시간이 부족해서 안 되네요. 맞왜틀을 몇 번 시전하고 난 후, 입력을 자세히 살펴보니 아래와 같은 문자열이 계속 반복되고 있었습니다. (<code>LeetCode</code>에서는 친절하게도 실패한 입력이 무엇인지를 알려줬습니다.)</p>\n<pre><code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\n</code></pre>\n<p>그러므로 전체 문자열 길이가 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>이라 하고, 이 문자열의 길이가 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>라 하면 길이 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>미만의 부분 문자열에서는 반복이 절대 나타나지 않습니다. 이 경우, 제 알고리즘에서는 시간복잡도가 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>m</mi><mi>k</mi><mo>−</mo><msup><mi>k</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2mk-k^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">mk</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>이 됩니다. 이는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>과 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>에 대해 단조증가입니다. 그런데 대충 보니 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>은 문제에서 제시한 최댓값정도인 듯하고, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>는 가능한 모든 문자를 사용했으므로 또한 최댓값이 됩니다. 그래서 이것이 가능한 입력 중 최악의 입력케이스였습니다.</p>\n<h1><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 접근</h1>\n<p>근데 한참 고민하다 보니까, 그냥 해결책이 떠올랐습니다. <code>dp</code>배열을 저렇게 구상할 게 아니라, 이렇게 하면 어떨까?</p>\n<pre><code>dp[i]=i번째 문자열을 끝으로 하는 반복되는 문자가 없는 가장 긴 부분문자열의 시작 위치\n</code></pre>\n<p>그리고 딕셔너리 <code>la</code>를 만들어서, 다음과 같이 정의합니다.</p>\n<pre><code>la[x]=현재 위치 이전에 문자 x가 나타난 마지막 위치. x가 한 번도 만약 나타나지 않았으면 0.\n</code></pre>\n<p>이렇게 하면 다음과 같은 알고리즘을 사용할 수 있습니다.</p>\n<ul>\n<li>부분문자열의 최대 길이를 <code>maxLength=0</code>이라 두자.</li>\n<li>위치 <code>i</code>에서 문자가 <code>x</code>라 하자.</li>\n<li>만약 마지막으로 <code>x</code>가 나타난 위치가 <code>dp[i-1]</code>보다 작다면, 이는 <code>dp[i-1]</code>에서 <code>i</code>사이에는 중복된 문자가 하나도 없다는 뜻이다.\n<ul>\n<li>그러므로 <code>dp[i]=dp[i-1]</code></li>\n</ul>\n</li>\n<li>만약 마지막으로 <code>x</code>가 나타난 위치(<code>la[x]</code>)가 <code>dp[i-1]</code>보다 크다면, 이는 <code>la[x]+1</code>과 <code>i</code>사이에는 중복된 문자가 하나도 없다는 뜻이다.\n<ul>\n<li>그러므로 <code>dp[i]=la[x]+1</code></li>\n</ul>\n</li>\n<li><code>i-dp[i]+1</code>이 <code>maxLength</code>보다 크다면 <code>maxLength=i-dp[i]+1</code>.</li>\n</ul>\n<p>사실 이 알고리즘을 다시 한 번 살펴보면 <code>dp</code>배열에서 오직 <code>i-1</code>번째 인덱스에만 접근한다는 것을 알 수 있습니다. 그러므로 <code>dp</code>는 굳이 배열로 구성할 필요 없이 그냥 변수 하나로 둬도 무방합니다.</p>\n<p>따라서 다음과 같이 코드를 작성해봤습니다. 아래 코드에서 <code>av</code>가 <code>dp</code>와 같은 의미입니다.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>(<span class=\"hljs-title class_ inherited__\">object</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lengthOfLongestSubstring</span>(<span class=\"hljs-params\">self, st</span>):\n        l = <span class=\"hljs-built_in\">len</span>(st)\n        <span class=\"hljs-keyword\">if</span> l&lt;<span class=\"hljs-number\">2</span>:\n            <span class=\"hljs-keyword\">return</span> l\n        la = {st[<span class=\"hljs-number\">0</span>]:<span class=\"hljs-number\">0</span>}\n        av = <span class=\"hljs-number\">0</span>\n        ml = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,l):\n            <span class=\"hljs-keyword\">if</span> st[i] <span class=\"hljs-keyword\">in</span> la:\n                av = <span class=\"hljs-built_in\">max</span>(av,la[st[i]]+<span class=\"hljs-number\">1</span>)\n            la[st[i]]=i\n            <span class=\"hljs-keyword\">if</span> (i-av)&gt;ml:\n                ml = i-av\n        <span class=\"hljs-keyword\">return</span> ml+<span class=\"hljs-number\">1</span>\n</code></pre>\n<p>코드가 훨씬 짧고 간결해졌습니다.</p>\n<p><img src=\"/imgs/744254c167103fcb5ed7518a756355e9.png\" alt=\"image-20210119230859665\"></p>\n<p>제출 결과, 모든 케이스를 통과했고 상위 10%정도 실행 속도라고 하네요. ㅎㅎ</p>\n<p>아래쪽에는 사용한 메모리에서 어느 정도 위치에 있는지를 보여주는데요.</p>\n<p><img src=\"/imgs/720116994db629ee3ffbfdb460406b68.png\" alt=\"image-20210119231015410\"></p>\n<p>흠... 뭔가 제가 모르는, 메모리를 더 적게 사용하는 방법이 있나 봅니다. 어쨌든 통과했고... 빠르면 된 거 아니겠습니까.ㅎ</p>\n<p>메모리도 그래프가 저렇게 생겨서 그렇지, 5%정도밖에 차이가 나지 않습니다. 그런 걸 보니 뭔가 변수 하나 더 쓰고 말고 정도의 차이인가 봅니다.</p>\n","imageMapping":{"imgs/image-20210119224241196.png":"/imgs/77da0f02c47ba1382dedb283eb859307.png","imgs/image-20210119230859665.png":"/imgs/744254c167103fcb5ed7518a756355e9.png","imgs/image-20210119231015410.png":"/imgs/720116994db629ee3ffbfdb460406b68.png"},"markdownFile":"m.md","name":"2021-01-19-algorithm-2"},"postsInSameCategory":[{"name":"2021-04-05-quine","title":"콰인(Quine)","date":"2021-04-05T21:27:20.117Z","category":"algorithm"},{"name":"2021-01-19-algorithm-2","title":"알고리즘:부분문자열","date":"2021-01-19T14:25:47.455Z","category":"algorithm"},{"name":"2021-01-17-algorithm-1","title":"알고리즘:N-queens problem","date":"2021-01-17T17:26:17.050Z","category":"algorithm"}]},"__N_SSG":true}